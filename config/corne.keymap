/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define EXT_POWER_OFF_CMD 0
#define EXT_POWER_ON_CMD 1
#define EXT_POWER_TOGGLE_CMD 2
#define EP_ON EXT_POWER_ON_CMD
#define EP_OFF EXT_POWER_OFF_CMD
#define EP_TOG EXT_POWER_TOGGLE_CMD

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0
#define SYMBOLS_L 1
#define ARROWS_L  2
#define NUMBERS_L 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        a {
            bindings = <&kp ESCAPE>;
            key-positions = <2 1>;
        };

        b {
            bindings = <&kp TAB>;
            key-positions = <16 15>;
        };

        c {
            bindings = <&kp CAPS>;
            key-positions = <13 14>;
        };

        e {
            bindings = <&kp ENTER>;
            key-positions = <22 21>;
        };

        f {
            bindings = <&kp MINUS>;
            key-positions = <19 20>;
        };

        g {
            bindings = <&kp EQUAL>;
            key-positions = <7 8>;
        };

        h {
            bindings = <&sys_reset>;
            key-positions = <1 29>;
        };

        j {
            bindings = <&sys_reset>;
            key-positions = <30 9>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <15 28>;
            layers = <0>;
        };

        lessthan {
            bindings = <&kp LESS_THAN>;
            key-positions = <31 20>;
            layers = <0>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <31 32>;
            layers = <0>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <19 20>;
            layers = <0>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 16>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <8 19>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <7 19>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <37 15>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <16 37>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <14 37>;
        };
    };

    macros {
        testtt: testtt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none &kp LS(T) &kp H &kp E &kp SPACE &kp P &kp A &kp T &kp I &kp E &kp N &kp T &kp SPACE &kp E &kp X &kp P &kp E &kp R &kp I &kp E &kp N &kp C &kp E &kp D &kp SPACE &kp S &kp Y &kp M &kp P &kp T &kp O &kp M &kp S &kp SPACE &kp O &kp F &kp SPACE>,
                <&macro_press>,
                <&kp P &kp COMMA &kp PERIOD>;

            label = "TESTTT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "0";
            bindings = <
&kp ESC  &kp Q             &kp W  &kp F    &kp P      &kp B          &kp J        &kp L          &kp U                &kp Y       &mt UNDERSCORE KP_MINUS  &kp BSPC
&kp TAB  &hm LEFT_SHIFT A  &kp R  &kp S    &kp T      &kp G          &kp M        &kp N          &kp E                &hm PIPE I  &hm RIGHT_SHIFT O        &kp TAB
&kp TAB  &kp Z             &kp X  &kp C    &kp D      &kp V          &kp K        &kp H          &hm BACKSLASH SLASH  &kp COMMA   &kp DOT                  &kp RSHFT
                                  &kp TAB  &kp SPACE  &lt 1 LC(C)    &lt 2 LC(V)  &kp BACKSPACE  &kp ENTER
            >;
        };

        number_layer {
            label = "1";
            bindings = <
&none  &kp QUESTION  &kp LEFT_PARENTHESIS  &kp CARET        &kp PRINTSCREEN  &kp PERCENT        &kp N7        &kp N8        &kp N9        &kp MINUS    &kp KP_MINUS     &none
&none  &kp AT_SIGN   &kp LEFT_BRACKET      &kp KP_MULTIPLY  &kp POUND        &kp DOLLAR         &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_PLUS  &kp KP_PLUS      &none
&none  &none         &none                 &mt SEMI COLON   &kp LEFT_BRACE   &kp RIGHT_BRACE    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp COMMA    &kp KP_ASTERISK  &none
                                           &none            &none            &kp LEFT_SHIFT     &kp EQUAL     &kp N0        &kp NUMBER_0
            >;
        };

        symbol {
            label = "2";
            bindings = <
&kp ESC  &kp QUESTION  &kp LEFT_PARENTHESIS  &kp CARET        &kp PRINTSCREEN  &kp PERCENT        &mt EXCLAMATION PIPE  &bt BT_SEL 0    &bt BT_SEL 1       &bt BT_SEL 2  &kp KP_MINUS  &none
&none    &kp AT_SIGN   &kp LEFT_BRACKET      &kp KP_MULTIPLY  &kp POUND        &kp DOLLAR         &kp EQUAL             &kp AMPERSAND   &none              &kp PIPE      &kp KP_PLUS   &none
&none    &none         &kp SEMI              &kp COLON        &kp LEFT_BRACE   &kp RIGHT_BRACE    &kp AMPS              &kp APOSTROPHE  &kp DOUBLE_QUOTES  &none         &kp DOT       &none
                                             &bt BT_PRV       &bt BT_NXT       &bt BT_CLR_ALL     &none                 &none           &none
            >;
        };

        arrow_layer {
            label = "3";
            bindings = <
&none  &none           &kp UP_ARROW    &none      &sys_reset  &none    &none  &none  &none  &none  &none  &none
&none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &none       &none    &none  &none  &none  &none  &none  &none
&none  &none           &none           &none      &none       &none    &none  &none  &none  &none  &none  &none
                                       &none      &none       &none    &none  &none  &none
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
